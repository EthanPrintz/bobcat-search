{"version":3,"sources":["components/SearchBar.js","pages/SearchPage.js","pages/SchedulePage.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","useEffect","document","getElementById","addEventListener","e","target","innerText","length","a","fetch","then","response","json","data","innerHTML","map","course","subjectCode","school","code","deptCourseId","name","replace","catch","error","console","id","contentEditable","placeholder","SearchPage","useState","departments","setDepartments","schools","setSchools","style","opacity","checkLoaded","setInterval","querySelector","paddingTop","clearInterval","ReactHtmlParser","Object","keys","sort","b","schoolCode","i","departmentCode","SchedulePage","App","className","to","src","alt","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2269fa5d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './css/SearchBar.css';\n\n\n\nexport default function SearchBar(){\n    useEffect(() => {\n        // Event listerner fortyping in search bar\n        document.getElementById('searchBar').addEventListener('input', (e) => {\n            if(e.target.innerText.length > 0){\n                (async () => {\n                    fetch(`https://schedge.torchnyu.com/2020/su/search?query=${e.target.innerText}&limit=5`)\n                        .then(response => response.json())    // one extra step\n                        .then(data => {\n                            document.getElementById('searchResults').innerHTML = (data.map(course => (\n                                `<div class=\"course\">\n                                    ${course.subjectCode.school}-${course.subjectCode.code} ${course.deptCourseId}:\n                                    ${course.name}\n                                </div>`\n                            )) + '').replace(/,/g, '');\n                        })\n                        .catch(error => console.error(error));\n                })();\n            } else {\n                // Remove search resoluts\n            }\n        });\n    }, []);\n\n    return(\n        <>\n            <div id=\"searchBar\" contentEditable=\"true\" placeholder=\"Search Courses\">\n\n            </div>\n            <div id=\"searchResults\"></div>\n        </>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport './css/SearchPage.css';\n\nimport SearchBar from '../components/SearchBar'\n\nexport default function SearchPage(){\n    // Set state\n    const [departments, setDepartments] = useState({});\n    const [schools, setSchools] = useState({});\n\n    // Query departments on component mount\n    useEffect(() => {\n        // Get Schedge data\n        (async () => {\n            fetch('https://schedge.torchnyu.com/subjects')\n                .then(response => response.json())    // one extra step\n                .then(data => setDepartments(data))\n                .catch(error => console.error(error));\n        })();\n        (async () => {\n            fetch('https://schedge.torchnyu.com/schools')\n                .then(response => response.json())    // one extra step\n                .then(data => setSchools(data))\n                .catch(error => console.error(error));\n        })();\n        // Animate in elements\n        document.getElementById('departmentTitle').style.opacity = 1;\n        let checkLoaded = setInterval(() => {\n            // Wait until departments are loaded\n            if(document.querySelector('.school')){\n                document.getElementById('departments').style.opacity = 1;\n                document.getElementById('departments').style.paddingTop = '4rem';\n                clearInterval(checkLoaded);\n            }\n        }, 50);\n    }, []);\n\n    return(\n        <div id=\"pageContainer\">\n            <div id=\"searchContainer\">\n                <SearchBar />\n            </div>\n            <div id=\"departmentContainer\">\n                <div id=\"departmentTitle\">Majors</div>\n                <div id=\"departments\">\n                {\n                    ReactHtmlParser((Object.keys(departments)\n                        .sort((a,b) => {\n                            return Object.keys(departments[b]).length - Object.keys(departments[a]).length\n                        })\n                        .map((schoolCode, i) => (\n                        `<div class=\"school\" key=\"${i}\">\n                            <div class=\"schoolTitle\">\n                                <span class=\"schoolCode\">${schoolCode}</span>\n                                <span class=\"schoolName\">${(schools[schoolCode] ?? '')}</span>\n                            </div>\n                            ${Object.keys(departments[schoolCode]).map((departmentCode, i) => (`\n                                <div class=\"department\">\n                                    <span class=\"departmentCode\">\n                                        ${departmentCode}\n                                    </span>\n                                    <span class=\"departmentName\">\n                                        ${departments[schoolCode][departmentCode]}\n                                    </span>\n                                </div>\n                            `))}\n                        </div>`\n                    )) + \"\").replace(/,/g, ''))\n                }\n                </div>\n            </div>  \n        </div>\n    )\n}","import React from 'react';\nimport './css/SchedulePage.css';\n\nexport default function SchedulePage(){\n    return(\n        <div>Schedule</div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink\n} from \"react-router-dom\";\n\n// Page Imports\nimport SearchPage from './pages/SearchPage'\nimport SchedulePage from './pages/SchedulePage'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li id=\"title\">\n              <Link to=\"/\">Bobcat Search</Link>\n            </li>\n            <li className=\"icon\">\n              <NavLink to=\"/schedule\">\n                <img src=\"./img/edit-calendar.svg\" alt=\"Edit Calendar\"/>\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/schedule\">\n            <SchedulePage />\n          </Route>\n          <Route path=\"/\">\n            <SearchPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './variables.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}